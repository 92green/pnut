// @flow

import React, {PropTypes} from 'react';
import * as d3Shape from 'd3-shape';

/**
 *
 * A component that is used to render the line.
 *
 * @typedef Line
 * @type ReactElement
 *
 * @prop {Object} lineProps
 * A mixture of default props and those passed through `Line.props.lineProps`. This object should
 * be able to be spread onto the svg element eg. `<path {...props.lineProps}/>`.
 *
 * @prop {number} lineProps.d
 * The path string generated by the `pathGenerator`.
 *
 * @prop {Object[]} scaledData
 * An array of objects with one object per row of data. Each object contains multiple dimensions and
 * will contain at least `x` and `y` as well as any other dimensions that were defined when setting
 * up the chart.
 *
 * @prop {ChartData} data
 * The `ChartData` Record for this chart.
 *
 * @prop {Function} pathGenerator
 * A partially set up [d3 line](https://github.com/d3/d3-shape#line) or [d3 area](https://github.com/d3/d3-shape#area)
 * generator. This can be modified and used to construct a new path string to be passed to the `path`
 * element.
 *
 */

function DefaultLine(props: Object): React.Element<any> {
    return <path
        {...props.lineProps}
    />;
}

/**
 *
 * @component
 *
 * LineRenderable is the low-level svg renderer for Line charts.
 *
 * @example
 *
 * const scaledData = [
 *     {x: 1, y: 200},
 *     {x: 2, y: 400},
 *     {x: 3, y: 600},
 *     {x: 4, y: 800},
 * ];
 *
 * return <LineRenderable
 *     height={1000}
 *     scaledData={scaledData}
 *     lineProps={{
 *          strokeWidth: '2'
 *     }}
 *     line={(props) => <path {...props.lineProps} stroke="red"/>}
 * />;
 *
 */

export class LineRenderable extends React.PureComponent {
    static defaultProps = {
        line: DefaultLine,
        area: false
    };

    static propTypes = {
        /**
         * The height of the canvas.
         */
        height: PropTypes.number.isRequired,

        /**
         * {ChartData} The `ChartData` Record that contains the data for the chart.
         */
        data: PropTypes.object,

        /**
         * {Object} The pre-scaled data that is used to render the line
         */
        scaledData: PropTypes.arrayOf(PropTypes.shape({
            x: PropTypes.number,
            y: PropTypes.number
        })).isRequired,

        /**
         * {Line} An optional custom line renderer
         */
        line: PropTypes.func,

        /**
         * An object of props that is passed onto the line renderer
         */
        lineProps: PropTypes.object,

        /**
         * If set to true then the line path will be closed and rendered as an area chart.
         */
        area: PropTypes.bool,

        /**
         * {Function} A function that, if provided, is called with an object containing all possible
         * [`d3-shape` curve functions](https://github.com/d3/d3-shape#curves)
         * By default this will be curveLinear but it can be customized by returning a different
         * curve function eg. `(curves) => curves.curveMonotoneX`
         */
        curveSelector: PropTypes.func
    };

    lineGenerator = d3Shape.line()
        .x((ii) => ii.x)
        .y((ii) => ii.y)
        .defined(ii => typeof ii.x === 'number' &&
                       typeof ii.y === 'number' &&
                       !isNaN(ii.x) &&
                       !isNaN(ii.y)
        );

    areaGenerator = d3Shape.area()
        .x((ii) => ii.x)
        .y1((ii) => ii.y)
        .y0(() => this.props.height)
        .defined(ii => typeof ii.x === 'number' &&
                       typeof ii.y === 'number' &&
                       !isNaN(ii.x) &&
                       !isNaN(ii.y)
        );


    render(): React.Element<any> {
        const {
            data,
            line: Line,
            curveSelector,
            area,
            scaledData,
            lineProps
        } = this.props;

        const curveFunction = curveSelector
            ? curveSelector(d3Shape)
            : d3Shape.curveLinear;

        const pathGenerator = area
            ? this.areaGenerator.curve(curveFunction)
            : this.lineGenerator.curve(curveFunction);

        return <g>
            <Line
                pathGenerator={pathGenerator}
                data={data}
                scaledData={scaledData}
                lineProps={{
                    fill: area ? 'inherit' : 'none',
                    stroke: area ? 'none' : 'inherit',
                    d: pathGenerator(scaledData),
                    ...lineProps
                }}
            />
        </g>;
    }
}


/**
 *
 * @component
 *
 * Component used to render line chart. This component requires further props to define what pieces
 * of data it uses. @see `Chart` for details.
 * @name Line
 *
 * @example
 * <Line
 *     line={(props) => <path {...props.lineProps} strokeWidth={3}/>}
 *     curve={(curves) => curves.curveMonotoneX}
 * />
 *
 */

class Line extends React.Component {
    static chartType = 'canvas';

    static propTypes = {
        /**
         * {Line} An optional custom line renderer
         */
        line: PropTypes.func,

        /**
         * An object of props that is passed onto the line renderer
         */
        lineProps: PropTypes.object,

        /**
         * If set to true then the line path will be closed and rendered as an area chart.
         */
        area: PropTypes.bool,

        /**
         * {Function} A function that, if provided, is called with an object containing all possible
         * [`d3-shape` curve functions](https://github.com/d3/d3-shape#curves)
         * By default this will be curveLinear but it can be customized by returning a different
         * curve function eg. `(curves) => curves.curveMonotoneX`
         */
        curveSelector: PropTypes.func
    };

    render(): React.Element<any> {
        return <LineRenderable {...this.props} />;
    }
}

export default Line;


